services:
  react:
    build: 
      context: .
      dockerfile: ./local/frontend/Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./frontend:/app
    networks:
      - internal
    command: sh -c "npm install && npm start"


  websocket-server:
    build: 
      context: .
      dockerfile: ./local/websocket-server/Dockerfile
    ports:
      - "8081:8081"
    volumes:
      - ./websocket-server:/app
      - ./go-shared:/go-shared
      - ./local/data/logs:/logs
    networks:
      - internal
    restart: always
    depends_on:
      - game
    environment:
    - LOG_LEVEL=${LOG_LEVEL}
    - FILE_INFO_DEBUG_LEVEL=${FILE_INFO_DEBUG_LEVEL}
    - LOG_DIR=/logs
    - CONTAINER_NAME=websocket-server
    - GAME_SERVICE_BASE_URL=http://game:8082
    - REDIS_PASSWORD=
    - REDIS_PORT=6379
    - REDIS_HOST=valkey
    - GAME_STATUS_CACHE_TIMEOUT=1
    - STAY_CONNECTED_PLAYER=5
    - LOKI_URL=http://loki:3100
    - DUPLICATE_LOGS=OFF
  game:
    build: 
      context: .
      dockerfile: ./local/game/Dockerfile
    ports:
      - "8082:8082"
    volumes:
      - ./game:/app
      - ./go-shared:/go-shared
      - ./local/data/logs:/logs
    networks:
      - internal
    restart: always
    environment:
    - LOG_LEVEL=${LOG_LEVEL}
    - FILE_INFO_DEBUG_LEVEL=${FILE_INFO_DEBUG_LEVEL}
    - LOG_DIR=/logs
    - CONTAINER_NAME=game
    - REDIS_PASSWORD=
    - REDIS_PORT=6379
    - REDIS_HOST=valkey
    - DB_PRIMARY_HOST=mysql
    - DB_PRIMARY_PORT=3306
    - DB_PRIMARY_NAME=${MYSQL_DATABASE}
    - DB_PRIMARY_USER=root
    - DB_PRIMARY_PASSWORD=${MYSQL_ROOT_PASSWORD}
    - LOKI_URL=http://loki:3100
    - DUPLICATE_LOGS=ON
  api-server:
      build: 
        context: .
        dockerfile: ./local/api-server/Dockerfile
      ports:
        - "8083:8083"
      volumes:
        - ./api-server:/app
        - ./go-shared:/go-shared
        - ./local/data/logs:/logs
      networks:
        - internal
      restart: always
      environment:
      - LOG_LEVEL=${LOG_LEVEL}
      - FILE_INFO_DEBUG_LEVEL=${FILE_INFO_DEBUG_LEVEL}
      - LOG_DIR=/logs
      - CONTAINER_NAME=api-server
      - GAME_SERVICE_BASE_URL=http://game:8082
      - LOKI_URL=http://loki:3100
      - DUPLICATE_LOGS=ON
      depends_on:
      - game
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    ports:
      - "80:80" 
    environment:
      - PMA_HOST=mysql
      - PMA_USER=root
      - PMA_PASSWORD=${MYSQL_ROOT_PASSWORD}
    networks:
      - internal
    restart: always

  mysql:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - ./local/data/mysql:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - internal
    restart: always
  valkey:
    image: valkey/valkey:8.1.2-alpine
    environment:
      - VALKEY_HOST=0.0.0.0
      - VALKEY_PORT=6379
    ports:
      - "6379:6379"
    volumes:
      - ./local/data/valkey:/data 
    networks:
      - internal
    restart: always  

  nginx:
    build: ./local/nginx
    ports:
      - "${APPLICATION_PORT}:80"
    depends_on:
      - react
      - websocket-server
      - api-server
    networks:
      - internal
      - external
    environment:
      - BASIC_USERNAME=${HTTP_ADMIN_USERNAME}
      - BASIC_PASSWORD=${HTTP_ADMIN_PASSWORD}
    volumes:
      - ./local/data/nginx:/var/log/nginx
      - ./local/nginx/index.html:/admin/index.html

  flyway:
    image: flyway/flyway:11.9-alpine-mongo
    environment:
      FLYWAY_URL: jdbc:mysql://mysql:3306/${MYSQL_DATABASE}
      FLYWAY_USER: root
      FLYWAY_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - ./sql:/flyway/sql
    depends_on:
      - mysql
    command: ["migrate"]
    networks:
      - internal

  redisinsight:
    image: redislabs/redisinsight:2.70
    ports:
      - "5540:5540"
    depends_on:
      - valkey
    networks:
      - internal
    environment:
      - RI_PROXY_PATH=/admin/redis/
    volumes:
        - ./local/data/redisinsight:/db

  loki:
    build:
      context: ./local/loki
      dockerfile: Dockerfile
    networks:
      - internal
    volumes:
      - loki:/loki/data

  grafana:
    build:
      context: ./local/grafana
      dockerfile: Dockerfile
    depends_on:
      - loki
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_DISABLE_SIGNOUT_MENU=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SERVER_ROOT_URL=/admin/grafana/
    networks:
      - internal
      - external
    volumes:
      - grafana:/var/lib/grafana

networks:
  internal:
    driver: bridge
    internal: true
  external:
    driver: bridge
volumes:
  grafana: 
    driver: local
  loki:
    driver: local
